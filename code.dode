fn main() {

    if 0 {print_int(34);}
    else {print_int(98765);}

    print_int(69 + 1234);
    print_int(69);
    print_int(1234);
    print_int(1 + 2 * 2 + 1);
    {
        !a = 1;
        !b = 2 + a + 3*4+2>5*1-3<2*3 + 4;
        !c = 3 + b - b * a * 2;
        print_int(a + b + c);
    }

    if 0 {
        print_int(69);
    }
    fibb(2+3*3,3,2+1+1+1+1);
    !a = 3434;

    if 34 {
        print_int(233);
        !x =  4;
    }
    !x = 34;

    if 45 {
        print_int(1+3*3*3*3+4+5);
    }
    else {}

    fibb(1000000, 0, 1);
    print_zeroes(5);
    #!x = 1 + (x = 3);
    if x == 3 {}

    !~b = 1;
    while b < 10 {
        print_int(factorial(b));
        b += 1;
    }
    print_zeroes(3);

    # expensive
    print_int(rec_fibb(23));
    !asd = 3 + 3 + 3;

    3 +  omega(2,4) + 1;
    return 0;
}


fn non_returning() {
    !a = 34;
    if 1 {
        return 3;
    }
    else {if 2 {return 5;} else {return 6;}}
    while 1 {
        return 4;
    }
}

fn omega(a,b) {return 0;}

fn print_zeroes(n) {
    !~b = 0;
    while b < n {
        b += 1;
        print_int(0);
    }
    return 0;
}

fn rec_fibb(n) {
    if n == 0 {
        return 0;
    }
    if n == 1 {
        return 1;
    }
    return rec_fibb(n-1) +  rec_fibb(n-2);
}

fn fibb(n, start, start2) {
    !~a = start;
    !~b = start2;
    while a < n {
        print_int(a);
        !c = a + b;
        a = b;
        b = c;
    }
    return 0;
}

fn factorial(n) {
    if n < 2 {
        return 1;
    }
    return factorial(n-1) * n;
}

fn bloated(n) {
    return n;
}
